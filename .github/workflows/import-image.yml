name: "Import Images"
run-name: ${{ github.actor }} is Import Images ðŸš€

on:
  pull_request:
    branches:
    - main
    paths:
    - trivy/.trivyignore
    - image-list
    types:
    - opened
    - reopened
    - synchronize
    - closed

jobs:
    scan-docker-image:
      name: "Scan Docker Image with Trivy"
      runs-on: ubuntu-latest
      permissions:
        security-events: write
        contents: read
        actions: read

      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
      
        - name: Set image reference
          run: |
            IMAGE_REF=$(tail -n 1 image-list | awk '{print $1}')
            echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV
            

        - name: Run Trivy vulnerability scanner for a Docker image
          id: trivy
          uses: aquasecurity/trivy-action@0.24.0
          with:
            image-ref: '${{ env.IMAGE_REF }}'
            format: 'table'
            ignore-unfixed: true # ignore vulnerabilities that have no fix
            severity: 'CRITICAL,HIGH'
            scanners: 'vuln'
            exit-code: '0'
            trivyignores: trivy/.trivyignore
      
          continue-on-error: true
    
        - name: Import image to Azure Container Registry
          id: import-image
          if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged
          run: |
            echo "Image will be imported"
            docker image prune -f
            echo "Push image to ACR"
            docker pull ${{env.IMAGE_REF}}
            #IMAGE_NAME=$(echo ${{ env.IMAGE_REF }} | awk -F '/' '{print $NF}')
            # docker tag ${{ env.IMAGE_REF }} azurecr.io/$IMAGE_NAME
            docker image ls
            echo "Show in ACR"
            input="${{ env.IMAGE_REF }}"
  
            # Extract the word before the second "/"
            REPO_NAME=$(echo "${{ env.IMAGE_REF }}" | awk -F '/' '{print $2}')
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
            
            # Extract the word after the second "/" and before the ":"
            IMAGE_NAME=$(echo "${{ env.IMAGE_REF }}" | awk -F '/' '{print $3}' | cut -d':' -f1)
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
            
            # Extract the portion after the ":"
            TAG=$(echo "${{ env.IMAGE_REF }}" | awk -F ':' '{print $2}')
            echo "TAG=$TAG" >> $GITHUB_ENV
            ACR_REPO_NAME="azurecr.io"
            echo "Repo: $REPO_NAME, Image: $IMAGE_NAME, Tag: $TAG"
            ACR_IMAGE="$ACR_REPO_NAME/$REPO_NAME/$IMAGE_NAME:$TAG"
            echo "ACR Image: $ACR_IMAGE"
            docker tag ${{ env.IMAGE_REF }} $ACR_IMAGE
            docker image ls
            
        - name: Just echo
          run: |
            echo "Repo: ${{ env.REPO_NAME }}, Image: ${{ env.IMAGE_NAME }}, Tag: ${{ env.TAG }}"
        
        
    release:
      name: Create Release
      runs-on: ubuntu-latest
      if: ${{ (success() || failure()) && (needs.scan-docker-image.result != 'skipped') && github.event.pull_request.merged }} 
      needs: scan-docker-image
      permissions:
          id-token: write
          contents: write
          actions: read
          security-events: write
          pull-requests: write
          packages: write
      outputs:
        version: ${{ steps.gitversion.outputs.majorMinorPatch }}
        majorVersion: ${{ steps.gitversion.outputs.major }}
        releaseNotes: ${{ steps.releaseNotes.outputs.releaseNotes }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up Helm
          uses: azure/setup-helm@v4.2.0
          with:
            version: v3.14.4

        - name: Install GitVersion
          uses: gittools/actions/gitversion/setup@v0.10.2
          with:
            versionSpec: '5.x'

        - name: Use GitVersion
          id: gitversion
          uses: gittools/actions/gitversion/execute@v0.10.2

        - name: What version
          run: echo ${{ steps.gitversion.outputs.semVer }}

        - name: Get Current Release
          id: get-release
          shell: bash
          run: |
            echo "current_release=$(gh release view v${{ steps.gitversion.outputs.majorMinorPatch }} --json name --jq '.name')" >> $GITHUB_OUTPUT
          env:
            GH_TOKEN: ${{ github.token }}

        - name: Create Release
          # Use format as workaround for open issue: https://github.com/actions/runner/issues/1173
          if: steps.get-release.outputs.current_release != format('v{0}', steps.gitversion.outputs.majorMinorPatch)
          shell: bash
          run: |
            gh release create v${{ steps.gitversion.outputs.majorMinorPatch }} --generate-notes
          env:
            GH_TOKEN: ${{ github.token }}
        - name: Get Github Release Notes
          id: releaseNotes
          shell: bash
          run: |
            releaseNotes="$(gh release view v${{ steps.gitversion.outputs.majorMinorPatch }} --json body --jq .body)"        
            echo "releaseNotes<<EOF" >> $GITHUB_OUTPUT
            echo "$releaseNotes" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT        
          env:
            GH_TOKEN: ${{ github.token }}
        
    tag-major:
      runs-on: ubuntu-latest
      needs: 
        - release
      permissions:
          id-token: write
          contents: write
          actions: read
          security-events: write
          pull-requests: write
          packages: write
      
      name: Update Major Tag
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
  
        - name: Tag new target
          run: git tag -f v${{ needs.release.outputs.majorVersion }} v${{ needs.release.outputs.version }}
  
        - name: Push new tag
          run: git push origin v${{ needs.release.outputs.majorVersion }} --force
  
  
  
  